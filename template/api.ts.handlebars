import Configuration from "./configuration";
{{#if components.schemas}}
  import {
    {{#each components.schemas}}{{@key}}, {{/each}}
  } from "./model";
{{/if}}
import { request, Parameter } from "./request";
import { deserialize } from "./serializer";

// {{info.title}}
{{!-- // {{info.description}} --}}
export default class Api {
  private config: Configuration;

  constructor(config: Configuration) {
    this.config = config;
  }

  {{#each paths}}
  {{setVar "path" @key}}
  {{#each this}}
    
    {{#if summary}}// {{summary}}{{/if}}
    {{#if description}}// {{description}}{{/if}}
    {{#each _sortedParameters}}
      // @param {{name}} {{description}}
    {{/each}}
    async {{operationId}}(
      {{#each _sortedParameters}}
        {{name}}{{#if _optional}}?{{/if}}: {{typeConvert schema}}{{#if schema.default}} = {{{quoteIfString schema.default}}}{{/if}},
      {{/each}}
    ): Promise<{{#if _response.schema}}{{typeConvert _response.schema}}{{else}}null{{/if}}> {
      const params: Parameter[] = [
        {{#each _sortedParameters}}
        {{#unless _optional}}
          {
            name: "{{name}}",
            value: {{name}}.toString(),
            type: "{{in}}"
          },
        {{/unless}}
        {{/each}}
      ];
      {{#each _sortedParameters}}
      {{#if _optional}}
      if ({{name}}) {
        params.push({
          name: "{{name}}",
          value: {{name}}.toString(),
          type: "{{in}}"
        })
      }
      {{/if}}
      {{/each}}
      const response = await request(this.config, "{{@root.path}}", "{{@key}}", params);
      return deserialize(response, "{{#if _response.schema}}{{typeConvert _response.schema}}{{else}}null{{/if}}");
    };

  {{/each}}  
  {{/each}}
}

