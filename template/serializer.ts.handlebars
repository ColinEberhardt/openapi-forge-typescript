{{#if _options.testRun }}
const model = require("./model");
{{else}}
import * as model from "./model";
{{/if}}

// takes a JSON response and deserializes it into the required model objects / types
export function deserialize(json: any, type: string): any {

  // handle arrays
  if (type.endsWith("[]")) {
    const arrayType = type.substring(0, type.length - 2);
    return json.map((item: any) => deserialize(item, arrayType));
  }

  // handle model objects
  if (model.models.includes(type)) {
    const modelObject = new (<any>model)[type]();
    const properties = (<any>model)[type].propertyTypes;
    for (const property of properties) {
      if (json[property.name] !== undefined) {
        modelObject[property.name] = deserialize(json[property.name], property.type);
      }
    }
    return modelObject;
  } 

  // handle date types
  if (type === "Date") {
    return new Date(json);
  }

  // handle additional properties
  const match = type.match(/\{ \[name: string\]: (.*) \}/);
  if (match) {
    const typeName = match[1];
    const modelObject: { [name: string]: any } = {};
    for (const key in json) {
      modelObject[key] = deserialize(json[key], typeName);
    }
    return modelObject;
  }
  
  return json;
}

export function serialize(name: string, item: any, location: string, schemaType: string): string {

  if(location === "query"){
    switch(schemaType){
      case "array":
        return querySerializeArray(name, item);
      case "object":
        return querySerializeObject(item);
      default:
        return querySerializeKvp(name, item);
    }
  }

  if(location === "path"){
    switch(schemaType){
      case "array":
        return item.map((it: string) => encodeURIComponent(it)).join(",");
      case "object":
        return pathSerializeObject(item);
      default:
        return item.toString();
    }
  }

  return schemaType === "object" || schemaType === "array" ? JSON.stringify(item) : item.toString();
}


const querySerializeObject = (queryObj: object) => Object.entries(queryObj).map(kvp => querySerializeKvp(kvp[0], kvp[1])).join("&");
const querySerializeArray = (name: string, queryArray: any) => queryArray.map(function(item :any){ return querySerializeKvp(name, item); }).join("&");
const querySerializeKvp = (key: any, val: any) => serializeKvp(key, val, "=");
const pathSerializeObject = (queryObj: object) => Object.entries(queryObj).map(kvp => serializeKvp(kvp[0], kvp[1], ",")).join(",");

const serializeKvp = (key: any, val: any, separator: string) => `${key}${separator}${encodeURIComponent(val)}`
